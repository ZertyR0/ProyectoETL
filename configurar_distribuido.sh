#!/bin/bash

# üöÄ Script de Configuraci√≥n R√°pida para Ambiente Distribuido
# Este script configura autom√°ticamente las variables de ambiente necesarias

echo "üöÄ Configurando Sistema ETL Distribuido"
echo "========================================"

# Funci√≥n para preguntar al usuario
preguntar() {
    local pregunta="$1"
    local default="$2"
    local variable="$3"
    
    echo -n "$pregunta [$default]: "
    read respuesta
    
    if [ -z "$respuesta" ]; then
        respuesta="$default"
    fi
    
    export $variable="$respuesta"
}

# Funci√≥n para configurar ambiente
configurar_ambiente() {
    echo ""
    echo "üìã Configuraci√≥n de IPs y Credenciales"
    echo "--------------------------------------"
    
    # Configuraci√≥n de m√°quinas
    preguntar "IP de la M√°quina 1 (BD Origen)" "172.26.163.200" "ETL_HOST_ORIGEN"
    preguntar "IP de la M√°quina 3 (Datawarehouse)" "172.26.164.100" "ETL_HOST_DESTINO"
    
    echo ""
    echo "üîê Configuraci√≥n de Credenciales"
    echo "--------------------------------"
    
    preguntar "Usuario de BD Origen" "etl_user" "ETL_USER_ORIGEN"
    preguntar "Password de BD Origen" "etl_password_123" "ETL_PASSWORD_ORIGEN"
    preguntar "Usuario de BD Destino" "etl_user" "ETL_USER_DESTINO"
    preguntar "Password de BD Destino" "etl_password_123" "ETL_PASSWORD_DESTINO"
    
    echo ""
    echo "üóÑÔ∏è Configuraci√≥n de Bases de Datos"
    echo "----------------------------------"
    
    preguntar "Nombre de BD Origen" "gestionproyectos_hist" "ETL_DB_ORIGEN"
    preguntar "Nombre de BD Destino" "dw_proyectos_hist" "ETL_DB_DESTINO"
    
    # Configuraciones adicionales
    export ETL_AMBIENTE="distribuido"
    export ETL_PORT_ORIGEN="3306"
    export ETL_PORT_DESTINO="3306"
}

# Funci√≥n para generar archivo de configuraci√≥n
generar_archivo_config() {
    echo ""
    echo "üìÑ Generando archivo de configuraci√≥n..."
    
    cat > config_distribuido.env << EOF
# Configuraci√≥n ETL Distribuido
# Generado autom√°ticamente: $(date)

# Tipo de ambiente
export ETL_AMBIENTE=distribuido

# Base de datos origen (M√°quina 1)
export ETL_HOST_ORIGEN=$ETL_HOST_ORIGEN
export ETL_PORT_ORIGEN=$ETL_PORT_ORIGEN
export ETL_USER_ORIGEN=$ETL_USER_ORIGEN
export ETL_PASSWORD_ORIGEN=$ETL_PASSWORD_ORIGEN
export ETL_DB_ORIGEN=$ETL_DB_ORIGEN

# Datawarehouse (M√°quina 3)
export ETL_HOST_DESTINO=$ETL_HOST_DESTINO
export ETL_PORT_DESTINO=$ETL_PORT_DESTINO
export ETL_USER_DESTINO=$ETL_USER_DESTINO
export ETL_PASSWORD_DESTINO=$ETL_PASSWORD_DESTINO
export ETL_DB_DESTINO=$ETL_DB_DESTINO
EOF

    echo "‚úÖ Archivo config_distribuido.env creado"
}

# Funci√≥n para actualizar bashrc
actualizar_bashrc() {
    echo ""
    echo "üìù ¬øDesea agregar la configuraci√≥n a ~/.bashrc? (y/n)"
    read -n 1 respuesta
    echo ""
    
    if [ "$respuesta" = "y" ] || [ "$respuesta" = "Y" ]; then
        echo "" >> ~/.bashrc
        echo "# Configuraci√≥n ETL Distribuido - $(date)" >> ~/.bashrc
        cat config_distribuido.env >> ~/.bashrc
        echo "‚úÖ Configuraci√≥n agregada a ~/.bashrc"
        echo "üí° Ejecute 'source ~/.bashrc' para aplicar los cambios"
    fi
}

# Funci√≥n para probar conectividad
probar_conectividad() {
    echo ""
    echo "üîç ¬øDesea probar la conectividad ahora? (y/n)"
    read -n 1 respuesta
    echo ""
    
    if [ "$respuesta" = "y" ] || [ "$respuesta" = "Y" ]; then
        # Cargar configuraci√≥n
        source config_distribuido.env
        
        echo "üîç Probando conectividad..."
        
        # Probar ping a m√°quinas
        echo -n "üì° Ping a BD Origen ($ETL_HOST_ORIGEN)... "
        if ping -c 1 -W 3 $ETL_HOST_ORIGEN > /dev/null 2>&1; then
            echo "‚úÖ OK"
        else
            echo "‚ùå FALLO"
        fi
        
        echo -n "üì° Ping a Datawarehouse ($ETL_HOST_DESTINO)... "
        if ping -c 1 -W 3 $ETL_HOST_DESTINO > /dev/null 2>&1; then
            echo "‚úÖ OK"
        else
            echo "‚ùå FALLO"
        fi
        
        # Probar conexiones MySQL si est√° disponible
        if command -v mysql &> /dev/null; then
            echo -n "üóÑÔ∏è Conexi√≥n MySQL BD Origen... "
            if mysql -h $ETL_HOST_ORIGEN -u $ETL_USER_ORIGEN -p$ETL_PASSWORD_ORIGEN -e "SELECT 1" > /dev/null 2>&1; then
                echo "‚úÖ OK"
            else
                echo "‚ùå FALLO"
            fi
            
            echo -n "üóÑÔ∏è Conexi√≥n MySQL Datawarehouse... "
            if mysql -h $ETL_HOST_DESTINO -u $ETL_USER_DESTINO -p$ETL_PASSWORD_DESTINO -e "SELECT 1" > /dev/null 2>&1; then
                echo "‚úÖ OK"
            else
                echo "‚ùå FALLO"
            fi
        else
            echo "‚ö†Ô∏è MySQL cliente no instalado, saltando pruebas de BD"
        fi
        
        # Ejecutar verificador completo si est√° disponible
        if [ -f "verificar_distribuido.py" ]; then
            echo ""
            echo "üîç ¬øDesea ejecutar verificaci√≥n completa? (y/n)"
            read -n 1 respuesta
            echo ""
            
            if [ "$respuesta" = "y" ] || [ "$respuesta" = "Y" ]; then
                python3 verificar_distribuido.py
            fi
        fi
    fi
}

# Funci√≥n para mostrar resumen
mostrar_resumen() {
    echo ""
    echo "üìä RESUMEN DE CONFIGURACI√ìN"
    echo "=========================="
    echo "üåê Ambiente: $ETL_AMBIENTE"
    echo "üìç BD Origen: $ETL_USER_ORIGEN@$ETL_HOST_ORIGEN:$ETL_PORT_ORIGEN/$ETL_DB_ORIGEN"
    echo "üìç Datawarehouse: $ETL_USER_DESTINO@$ETL_HOST_DESTINO:$ETL_PORT_DESTINO/$ETL_DB_DESTINO"
    echo ""
    echo "üìÅ Archivos generados:"
    echo "   ‚Ä¢ config_distribuido.env"
    echo ""
    echo "üöÄ Pr√≥ximos pasos:"
    echo "   1. Cargar configuraci√≥n: source config_distribuido.env"
    echo "   2. Probar conexiones: python3 verificar_distribuido.py"
    echo "   3. Ejecutar ETL: python3 02_ETL/scripts/etl_principal.py"
    echo "   4. Iniciar dashboard: python3 03_Dashboard/backend/app.py"
    echo ""
}

# Funci√≥n principal
main() {
    # Verificar que estamos en el directorio correcto
    if [ ! -f "README_PRINCIPAL.md" ]; then
        echo "‚ùå Error: Este script debe ejecutarse desde el directorio ra√≠z del proyecto ETL"
        exit 1
    fi
    
    # Ejecutar configuraci√≥n
    configurar_ambiente
    generar_archivo_config
    actualizar_bashrc
    probar_conectividad
    mostrar_resumen
    
    echo "üéâ ¬°Configuraci√≥n completada!"
}

# Ejecutar funci√≥n principal
main

# Funci√≥n de ayuda
mostrar_ayuda() {
    echo "üìñ AYUDA - Configurador ETL Distribuido"
    echo "======================================="
    echo ""
    echo "Este script configura autom√°ticamente un sistema ETL distribuido en 3 m√°quinas:"
    echo ""
    echo "üìç M√°quina 1 (BD Origen):"
    echo "   ‚Ä¢ IP por defecto: 172.26.163.200"
    echo "   ‚Ä¢ Funci√≥n: Base de datos operacional"
    echo "   ‚Ä¢ Software: MySQL Server"
    echo ""
    echo "üìç M√°quina 2 (ETL + Dashboard):"
    echo "   ‚Ä¢ IP: Esta m√°quina"
    echo "   ‚Ä¢ Funci√≥n: Procesamiento ETL y dashboard web"
    echo "   ‚Ä¢ Software: Python, Flask, MySQL Client"
    echo ""
    echo "üìç M√°quina 3 (Datawarehouse):"
    echo "   ‚Ä¢ IP por defecto: 172.26.164.100"
    echo "   ‚Ä¢ Funci√≥n: Almac√©n de datos para an√°lisis"
    echo "   ‚Ä¢ Software: MySQL Server"
    echo ""
    echo "üîß Uso:"
    echo "   ./configurar_distribuido.sh        # Configuraci√≥n interactiva"
    echo "   ./configurar_distribuido.sh help   # Mostrar esta ayuda"
    echo ""
    echo "üìÅ Archivos generados:"
    echo "   ‚Ä¢ config_distribuido.env - Variables de ambiente"
    echo "   ‚Ä¢ ~/.bashrc actualizado (opcional)"
    echo ""
    echo "üîç Verificaci√≥n:"
    echo "   python3 verificar_distribuido.py   # Verificar configuraci√≥n completa"
    echo ""
}

# Verificar si se solicita ayuda
if [ "$1" = "help" ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    mostrar_ayuda
    exit 0
fi
