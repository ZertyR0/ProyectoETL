import random
from datetime import datetime, date, timedelta
from faker import Faker
import mysql.connector  # Se usará MySQL como ejemplo de motor de la BD origen

fake = Faker("es_MX")

# Conexión a la base de datos origen (ajustar credenciales según entorno)
conn = mysql.connector.connect(host="127.0.0.1", port=3306, user="root", password="", database="gestionproyectos_hist")
conn.autocommit = True
cur = conn.cursor()

# 1. Insertar Clientes
num_clientes = 10
for _ in range(num_clientes):
    nombre_cli = fake.company()[:100]                  # nombre o razón social
    sector_cli = fake.bs().split()[0][:50]             # sector (toma primera palabra del bs)
    contacto_cli = fake.name()[:100]                   # persona de contacto
    tel_cli = fake.phone_number()[:20]
    email_cli = fake.company_email()[:100]
    cur.execute(
        "INSERT INTO cliente (nombre, sector, contacto, telefono, email) VALUES (%s, %s, %s, %s, %s)",
        (nombre_cli, sector_cli, contacto_cli, tel_cli, email_cli)
    )

# 2. Insertar Empleados
puestos = ["Desarrollador", "Analista", "QA", "Gerente de Proyecto", "Diseñador", "DevOps"]
num_empleados = 20
for _ in range(num_empleados):
    nombre_emp = fake.name()[:100]
    puesto_emp = random.choice(puestos)
    cur.execute(
        "INSERT INTO empleado (nombre, puesto) VALUES (%s, %s)",
        (nombre_emp, puesto_emp)
    )

# 3. Insertar Equipos
num_equipos = 5
for i in range(1, num_equipos+1):
    nombre_eq = f"Equipo {i}"
    desc_eq = fake.catch_phrase()[:200]  # frase aleatoria como descripción
    cur.execute(
        "INSERT INTO equipo (nombre_equipo, descripcion) VALUES (%s, %s)",
        (nombre_eq, desc_eq)
    )

# 4. Insertar Estados (ejemplo de estados posibles para proyectos/tareas)
estados = ["Pendiente", "En Progreso", "Completado", "Cancelado"]
for estado in estados:
    cur.execute(
        "INSERT INTO estado (nombre_estado) VALUES (%s)",
        (estado,)
    )

# 5. Insertar MiembroEquipo (historial de empleados en equipos con rol y fechas)
# Obtenemos listas de IDs ya insertados:
cur.execute("SELECT id_empleado FROM empleado")
id_empleados = [row[0] for row in cur.fetchall()]
cur.execute("SELECT id_equipo FROM equipo")
id_equipos = [row[0] for row in cur.fetchall()]

roles = ["Developer", "Analista", "QA", "Líder de Equipo", "Scrum Master"]
for id_eq in id_equipos:
    # Asignar aleatoriamente 3-6 miembros a cada equipo
    miembros = random.sample(id_empleados, k=random.randint(3, 6))
    for id_emp in miembros:
        inicio = fake.date_between(start_date="-720d", end_date="-180d")  # entre ~2 años y 6 meses atrás
        # 50% de probabilidad de que siga activo (fecha_hasta NULL), si no, asignar fin aleatorio después de inicio
        if random.random() < 0.5:
            fin = None
        else:
            fin = fake.date_between(start_date=inicio, end_date="+180d")
        rol = random.choice(roles)
        cur.execute(
            "INSERT INTO miembroequipo (id_equipo, id_empleado, fecha_inicio, fecha_hasta, rol_miembro) VALUES (%s, %s, %s, %s, %s)",
            (id_eq, id_emp, inicio, fin, rol)
        )
# 6. Generar Proyectos cerrados con tareas cerradas
N_PROYECTOS = 50
cur.execute("SELECT id_cliente FROM cliente")
CLIENTES = [r[0] for r in cur.fetchall()]
cur.execute("SELECT id_empleado FROM empleado")
EMPLEADOS = [r[0] for r in cur.fetchall()]
cur.execute("SELECT id_equipo FROM equipo")
EQUIPOS = [r[0] for r in cur.fetchall()]
cur.execute("SELECT id_estado FROM estado WHERE nombre_estado IN ('Completado','Cancelado')")
ESTADOS_CERRADOS = [r[0] for r in cur.fetchall()]

assert CLIENTES and EMPLEADOS and EQUIPOS and ESTADOS_CERRADOS, "Datos base insuficientes para generar proyectos."

hoy = date.today()
proyectos_creados = tareas_creadas = asignaciones_creadas = 0

for _ in range(N_PROYECTOS):
    id_cliente = random.choice(CLIENTES)
    id_gerente = random.choice(EMPLEADOS)  # empleado a cargo
    id_estado_proj = random.choice(ESTADOS_CERRADOS)  # Completado o Cancelado

    nombre_proj = fake.catch_phrase().capitalize()[:150]
    desc_proj = fake.text(max_nb_chars=100)
    # Fechas del proyecto:
    fecha_inicio = fake.date_between(start_date="-540d", end_date="-180d")  # entre 18 y 6 meses atrás
    duracion_plan_dias = random.randint(45, 150)
    fecha_fin_plan = fecha_inicio + timedelta(days=duracion_plan_dias)
    # Fecha real de fin: puede ser unos días antes o hasta 20 días después de la planificada
    delta_fin = random.randint(-5, 20)
    fecha_fin_real = fecha_fin_plan + timedelta(days=delta_fin)
    # Presupuesto y costo real del proyecto
    presupuesto = round(random.uniform(25000, 90000), 2)
    costo_real = round(presupuesto * random.uniform(0.9, 1.2), 2)

    # Insertar proyecto
    cur.execute(
        "INSERT INTO proyecto (id_cliente, nombre, descripcion, fecha_inicio, fecha_fin_plan, fecha_fin_real, presupuesto, costo_real, id_estado, id_empleado_gerente) "
        "VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
        (id_cliente, nombre_proj, desc_proj, fecha_inicio, fecha_fin_plan, fecha_fin_real, presupuesto, costo_real, id_estado_proj, id_gerente)
    )
    id_proyecto = cur.lastrowid
    proyectos_creados += 1

    # Generar de 8 a 12 tareas para este proyecto
    for _t in range(random.randint(8, 12)):
        # Fecha de inicio planificada de la tarea (entre el inicio del proyecto y un poco antes de fin_plan)
        t_inicio_plan = fake.date_between(start_date=fecha_inicio, end_date=(fecha_fin_plan - timedelta(days=15)))
        duracion_plan_t = random.randint(5, 20)  # duración planificada de la tarea en días
        t_fin_plan = t_inicio_plan + timedelta(days=duracion_plan_t)
        # Fecha real de fin de la tarea (puede variar de -3 a +10 días respecto al plan)
        t_fin_real = t_fin_plan + timedelta(days=random.randint(-3, 10))
        # Horas planificadas vs reales para la tarea
        horas_plan = random.randint(16, 120)
        horas_reales = max(1, int(horas_plan * random.uniform(0.8, 1.3)))
        # Estado de la tarea: Completado o Cancelado
        id_estado_tarea = random.choice(ESTADOS_CERRADOS)

        # Insertar tarea
        cur.execute(
            "INSERT INTO tarea (id_proyecto, nombre_tarea, fecha_inicio_plan, fecha_fin_plan, fecha_fin_real, horas_plan, horas_reales, id_estado) "
            "VALUES (%s,%s,%s,%s,%s,%s,%s,%s)",
            (id_proyecto, fake.bs().capitalize(), t_inicio_plan, t_fin_plan, t_fin_real, horas_plan, horas_reales, id_estado_tarea)
        )
        id_tarea = cur.lastrowid
        tareas_creadas += 1

        # Registrar la asignación histórica de la tarea a un equipo (TareaEquipoHist)
        id_equipo = random.choice(EQUIPOS)
        cur.execute(
            "INSERT INTO tareaequipohist (id_tarea, id_equipo, fecha_asignacion, fecha_liberacion) VALUES (%s,%s,%s,%s)",
            (id_tarea, id_equipo, t_inicio_plan, t_fin_real)
        )
        asignaciones_creadas += 1

print(f"✅ Inserción terminada. Proyectos creados: {proyectos_creados}, Tareas creadas: {tareas_creadas}, Asignaciones registradas: {asignaciones_creadas}")
cur.close()
conn.close()